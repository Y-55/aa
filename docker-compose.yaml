version: '3.8'

networks:
  internal_nw:
    name: internal_nw
    driver: bridge

services:
  redpanda-1:
    image: docker.vectorized.io/vectorized/redpanda:latest
    container_name: redpanda-1
    hostname: redpanda-1
    ports:
      - 8081:8081
      - 8082:8082
      - 9092:9092
      - 9093:9093
      - 28082:28082
      - 29092:29092
      - 9644:9644
    command:
      - redpanda
      - start
      - --smp
      - '1'
      - --reserve-memory
      - 200M
      - --overprovisioned
      - --node-id
      - '0'
      - --memory
      - '2G'
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda-1:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr
      - PLAINTEXT://0.0.0.0:28082,OUTSIDE://0.0.0.0:8082
      - --advertise-pandaproxy-addr
      - PLAINTEXT://redpanda-1:28082,OUTSIDE://localhost:8082
      - --rpc-addr
      - 0.0.0.0:33145
      - --advertise-rpc-addr
      - redpanda-1:33145
      - --check=false
    networks:
      - internal_nw

  connect-debezium:
    image: debezium/connect:3.0.0.Final
    container_name: connect
    hostname: connect
    depends_on:
      - redpanda-1
    ports:
      - 8083:8083
    environment:
      BOOTSTRAP_SERVERS: redpanda-1:29092
      GROUP_ID: connect-group
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_PORT: 8083
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - internal_nw
  
  connect-redis:
    image: fieldengineering/redis-kafka-connect
    build:
      context: .
    hostname: connect-redis
    container_name: connect-redis
    depends_on:
      - redpanda-1
      - redis
    ports:
      - "8084:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'redpanda-1:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect-redis
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://redpanda-1:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.2.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    networks:
      - internal_nw
    healthcheck:
      interval: 5s
      retries: 10
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8083

  redpanda-console:
    image: docker.redpanda.com/vectorized/console:v2.1.1
    container_name: redpanda-console
    hostname: redpanda-console
    depends_on:
      - redpanda-1
      - connect-debezium
      - connect-redis
    ports:
      - 8080:8080
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-1:29092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-1:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-1:9644"]
        connect:
          enabled: true
          clusters:
            - name: cdc
              url: http://connect-debezium:8083
            - name: redis
              url: http://connect-redis:8083
              # No auth configured on that cluster, hence no username/password set
    networks:
      - internal_nw

  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    depends_on:
      - redpanda-1
    ports:
      - 5432:5432
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    # volumes:
    #   - ${PROJECT_PATH}/volumes/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical" #required for MaterializedPostgreSQL
    networks:
      - internal_nw

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    hostname: clickhouse
    depends_on:
      - postgres
      - redpanda-1
    ports:
      - 9000:9000
      - 8123:8123
    user: "101:101"
    environment:
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - ./volumes/clickhouse/data:/var/lib/clickhouse
      - ./volumes/clickhouse/logs:/var/log/clickhouse-server
      # - ./volumes/clickhouse/config:/etc/clickhouse-server
      # - ${PROJECT_PATH}/volumes/clickhouse/etc/clickhouse-server/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml
      # - ${PROJECT_PATH}/volumes/clickhouse/etc/clickhouse-server/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml
    ulimits:
      nproc: 65535
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - internal_nw
    
  redis:
    image: redis/redis-stack-server:latest
    hostname: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - internal_nw
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

  kafka-streams-app:
    build:
      context: ./scripts/kafka_streams_app
      dockerfile: Dockerfile
    container_name: kafka-streams-app
    hostname: kafka-streams-app
    depends_on:
      - redpanda-1
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda-1:29092
      - ENGAGEMENT_TOPIC=pg.public.engagement_events
      - CONTENT_TOPIC=pg.public.content
      - OUTPUT_TOPIC=ks.content_engagement_transformed
    restart: unless-stopped
    networks:
      - internal_nw
    volumes:
      - ./scripts/kafka_streams_app/logs:/app/logs

  management:
    build:
      context: .
    command: tail -f /dev/null
    hostname: management
    depends_on:
      - redpanda-1
      - connect
      - postgres
      - clickhouse
    volumes:
      - ./scripts:/app/scripts
      - ./.env:/app/.env
      - ./connect-configs:/app/connect-configs
    restart: on-failure:3
    stdin_open: true
    tty: true
    networks:
      - internal_nw